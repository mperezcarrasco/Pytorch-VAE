import torch
from torch import optim
import torch.nn.functional as F
from sklearn.mixture import GaussianMixture

from models import Autoencoder, VaDE


def weights_init_normal(m):
    classname = m.__class__.__name__
    if classname.find("Linear") != -1:
        torch.nn.init.normal_(m.weight.data, 0.0, 0.02)

class TrainerVaDE:
    """This is the trainer for the Variational Deep Embedding (VaDE).
    """
    def __init__(self, args, device, dataloader, dataloader_test):
        self.autoencoder = Autoencoder().to(device)
        self.VaDE = VaDE().to(device)
        self.dataloader = dataloader
        self.dataloader_test = dataloader_test
        self.device = device
        self.args = args


    def pretrain(self):
        """Here we train an stacked autoencoder which will be used as the initialization for the VaDE. 
        This initialization is usefull because reconstruction in VAEs would be weak at the begining
        and the models are likely to get stuck in local minima.
        """
        optimizer = optim.Adam(self.autoencoder.parameters(), lr=0.002)
        self.autoencoder.apply(weights_init_normal) #intializing weights using normal distribution.
        self.autoencoder.train()

        for epoch in range(20):
            total_loss = 0
            for x, _ in self.dataloader:
                optimizer.zero_grad()
                x = x.to(self.device).view(-1, 784)
                x_hat = self.autoencoder(x)
                loss = F.binary_cross_entropy(x_hat, x, reduction='mean') # just reconstruction
                loss.backward()
                optimizer.step()
                total_loss += loss.item()
            print('Training Autoencoder... Epoch: {}, Loss: {}'.format(epoch, total_loss))
        self.train_GMM() #training a GMM for initialize the VaDE
        self.save_weights_for_VaDE() #saving weights for the VaDE


    def train_GMM(self):
        """It is possible to fit a Gaussian Mixture Model (GMM) using the latent space 
        generated by the stacked autoencoder. This way, we generate an initialization for 
        the priors (pi, mu, var) of the VaDE model.
        """
        x = torch.cat([data[0] for data in self.dataloader]).view(-1, 784).to(self.device) #all x samples.
        z = self.autoencoder.encode(x)
        self.gmm = GaussianMixture(n_components=10, covariance_type='diag')
        self.gmm.fit(z.cpu().detach().numpy())


    def save_weights_for_VaDE(self):
        """Saving the pretrained weights for the encoder, decoder, pi, mu, var.
        """
        state_dict = self.autoencoder.cpu().state_dict()

        self.VaDE.load_state_dict(state_dict, strict=False)
        self.VaDE.pi.data = torch.log(torch.from_numpy(self.gmm.weights_)).float()
        self.VaDE.mu.data = torch.from_numpy(self.gmm.means_).float()
        self.VaDE.logvar.data = torch.log(torch.from_numpy(self.gmm.covariances_)).float()
        torch.save(self.VaDE.state_dict(), self.args.pretrained_path)
    

    def train(self):
        """
        """
        if self.args.pretrain==True:
            self.VaDE.load_state_dict(torch.load(self.args.pretrained_path))
        else:
            self.VaDE.apply(weights_init_normal)
        self.optimizer = optim.Adam(self.VaDE.parameters(), lr=self.args.lr)
        lr_scheduler = torch.optim.lr_scheduler.StepLR(
                    self.optimizer, step_size=10, gamma=0.9)
        
        for epoch in self.args.epochs:
            self.train_VaDE(epoch)
            self.test_VaDE(epoch)
            lr_scheduler.step()


    def train_VaDE(self, epoch):
        self.VaDE.train()

        total_loss = 0
        for x, _ in self.dataloader:
            self.optimizer.zero_grad()
            x = x.to(self.device).view(-1, 784)
            x_hat, mu, log_var = self.VaDE(x)
            loss = self.compute_loss(x, x_hat, mu, log_var)
            loss.backward()
            self.optimizer.step()
            total_loss += loss.item()
        print('Training VaDE... Epoch: {}, Loss: {}'.format(epoch, total_loss))


    def test_VaDE(self, epoch):
        self.VaDE.eval()

        with torch.no_grad():
            total_loss = 0
            for x, _ in self.dataloader_test:
                x = x.to(self.device).view(-1, 784)
                x_hat, mu, log_var = self.VaDE(x)
                loss = self.compute_loss(x, x_hat, mu, log_var)
                total_loss += loss.item()
            print('Testing VaDE... Epoch: {}, Loss: {}'.format(epoch, total_loss))


    def compute_loss(self, x, x_hat, mu, log_var):


        reconst_loss = F.binary_cross_entropy(x_hat, x, reduction='mean')

        loss = reconst_loss

        return loss